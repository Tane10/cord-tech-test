import bodyParser from "body-parser";
import rules from "./rules.json";
import {findRequiredSchema, isEmpty} from "../helper";

export default function (app) {
  app.set("port", process.env.PORT || 3000);
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({ extended: true }));
}


/**
 * Creates SchemaValidation
 * @class
 * @classdesc SchemaValidation class that has request, schema and schemaKeys props
 * @param {object} schema JSON schema containing rules
 * @param {object} request express req object
 */
function SchemaValidation (schema, request) {
  this.request = request;
  this.schema = schema.paths;
  this.schemaKeys = Object.keys(this.schema);
  this.schemaEntries = Object.entries(this.schema)
};

/**
 * Function that extracts and returns the body, querystring, originalUrl and requestMethod of the request
 */
 SchemaValidation.prototype.retrieveRequestDetails = function () {
  const { body, originalUrl } = this.request;
  const queryString = this.request.query;
  const requestMethod = this.request.method.toLowerCase();
  return { body, queryString, originalUrl, requestMethod };
};

SchemaValidation.prototype.validationError = function (message, context) {
  return {
    message: message + context,
    status: 400,
  };
};

SchemaValidation.prototype.extractRouteParameters = function () {
  // to get the parameters we need to first match the path name -> the method -> then check if has property parameters
  const requestDetails = this.retrieveRequestDetails();

  // if the route doesn't match then throw error or ignore the validation
  // map schema when matches route then use method and find params in schema
  const selectedSchema = findRequiredSchema(this.schemaEntries,requestDetails.originalUrl, requestDetails.requestMethod )

  // if schema not found then ignore validation
  if(!selectedSchema){
    return
  }


  if (!selectedSchema.hasOwnProperty("parameters")) {
    // if it request contains body or query params then return correct error
    const isBodyEmpty = isEmpty(retrievedRequestDetails.body);
    const isQueryStringEmpty = isEmpty(retrievedRequestDetails.queryString);

    // if body or query string contains params then build message and return error
   !isBodyEmpty && !isQueryStringEmpty ?
      this.validationError("Parameters are not permitted") : !isBodyEmpty ? this.validationError("Parameters are not permitted")
    
  }

  return selectedSchema;
};





/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = (req, res, next) => {
  const validation = new SchemaValidation(rules, req);

  const selectedSchema = validation.extractRouteParameters();

  //   const requiredPathRule = rulesEntries.filter((entry) => {
  //     if (entry[0] === url) {
  //       return entry;
  //     }
  //   });

  //   // checking if rules/ route quired a param if not then pass
  //   if (!requiredPathRule[1][req.method].hasOwnProperty(parameters)) {
  //     return next();
  //   }

  //   // parameter in -> body or query

  //   const rulesParameters = requiredPathRule[1][req.method].parameters;

  //   if (rulesParameters[0].in === "body") {
  //     if (!body) {
  //       res.status(400).json({
  //         message: "bad request body required",
  //       });
  //     }

  //     const schemaType = rulesParameters[0].schema.type;
  //     // once we have schema type then we check using typeof
  //     // before type of check validate if there is a body in req
  //     // if the types did match how would you proceeedd
  //     // if this is obj check what is rwuiimport { connect } from 'react-redux'

  //     // map shema and filed all reuired keys and do the same with properties
  //     // once got map both using reduce and once keep reuired in array or object
  //     const requiredKeys = rulesParameters[0].schema.required;

  //     // handle reuired sperate in my spare time to get it done
  //     const properties = Object.entries(rulesParameters[0].schema.properties);

  //     const onlyRequiredParams = requiredKeys.reduce((prev, current) => {
  //       if (properties[0] === current) {
  //         return (prev[current] = current.type);
  //       }
  //     }, {});
  //   }
  //schema -> type -> object etc -> requiered true / false

  // once we have the required url then filter

  // TBD
  return next();
};
